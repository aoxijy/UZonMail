name: Build UZonMail

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  release:
    types: [ published ]

env:
  DOTNET_VERSION: '9.0.x'
  NODE_VERSION: '18.x'

jobs:
  build-windows-desktop:
    runs-on: windows-latest
    name: Build Windows Desktop
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'yarn'
        cache-dependency-path: 'ui-src/yarn.lock'

    - name: Install 7-Zip
      run: |
        choco install 7zip -y

    - name: Install Yarn
      run: |
        npm install -g yarn

    - name: Install frontend dependencies
      working-directory: ./ui-src
      run: |
        yarn install --frozen-lockfile

    - name: Build Windows Desktop
      working-directory: ./scripts
      shell: pwsh
      run: |
        ./build-desktop.ps1

    - name: Upload Windows Desktop Artifact
      uses: actions/upload-artifact@v4
      with:
        name: uzonmail-desktop-windows
        path: build/uzonmail-desktop-win-x64-*.zip
        retention-days: 30

  build-windows-server:
    runs-on: windows-latest
    name: Build Windows Server
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'yarn'
        cache-dependency-path: 'ui-src/yarn.lock'

    - name: Install 7-Zip
      run: |
        choco install 7zip -y

    - name: Install Yarn
      run: |
        npm install -g yarn

    - name: Install frontend dependencies
      working-directory: ./ui-src
      run: |
        yarn install --frozen-lockfile

    - name: Build Windows Server
      working-directory: ./scripts
      shell: pwsh
      run: |
        ./build-win-server.ps1

    - name: Upload Windows Server Artifact
      uses: actions/upload-artifact@v4
      with:
        name: uzonmail-server-windows
        path: build/uzonmail-service-win-x64-*.zip
        retention-days: 30

  build-linux-server:
    runs-on: ubuntu-latest
    name: Build Linux Server
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'yarn'
        cache-dependency-path: 'ui-src/yarn.lock'

    - name: Install Docker and dependencies
      run: |
        sudo apt-get update
        
        # 安装基础依赖
        sudo apt-get install -y p7zip-full ca-certificates curl gnupg lsb-release
        
        # 清理可能冲突的容器相关包
        sudo apt-get remove -y containerd docker docker-engine docker.io runc || true
        
        # 添加 Docker 官方 GPG 密钥
        sudo mkdir -p /etc/apt/keyrings
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
        
        # 添加 Docker 仓库
        echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
        
        # 更新包列表并安装 Docker
        sudo apt-get update
        sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
        
        # 启动 Docker 服务
        sudo systemctl start docker
        sudo systemctl enable docker
        
        # 将当前用户添加到 docker 组（在 CI 环境中可能不需要）
        sudo usermod -aG docker $USER || true

    - name: Install Yarn
      run: |
        npm install -g yarn

    - name: Install frontend dependencies
      working-directory: ./ui-src
      run: |
        yarn install --frozen-lockfile

    - name: Build Linux Server
      working-directory: ./scripts
      run: |
        # 确保 PowerShell 可用
        sudo apt-get install -y powershell || true
        pwsh ./build-linux.ps1

    - name: Upload Linux Server Artifact
      uses: actions/upload-artifact@v4
      with:
        name: uzonmail-server-linux
        path: build/uzonmail-linux-x64-*.zip
        retention-days: 30

  create-release:
    runs-on: ubuntu-latest
    name: Create Release
    if: github.event_name == 'release' && github.event.action == 'published'
    needs: [build-windows-desktop, build-windows-server, build-linux-server]
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts

    - name: List downloaded files
      run: |
        find ./artifacts -type f -name "*.zip"

    - name: Upload to Release
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: ./artifacts/**/*.zip
        tag: ${{ github.ref }}
        overwrite: true
        file_glob: true
