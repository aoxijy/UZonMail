name: Build UZonMail

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  release:
    types: [ published ]

env:
  DOTNET_VERSION: '9.0.x'
  NODE_VERSION: '18.x'

jobs:
  build-windows-desktop:
    runs-on: windows-latest
    name: Build Windows Desktop
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'yarn'
        cache-dependency-path: 'ui-src/yarn.lock'

    - name: Install 7-Zip
      run: |
        choco install 7zip -y

    - name: Install Yarn
      run: |
        npm install -g yarn

    - name: Install frontend dependencies
      working-directory: ./ui-src
      run: |
        yarn install --frozen-lockfile

    - name: Build Windows Desktop
      working-directory: ./scripts
      shell: pwsh
      run: |
        ./build-desktop.ps1

    - name: Upload Windows Desktop Artifact
      uses: actions/upload-artifact@v4
      with:
        name: uzonmail-desktop-windows
        path: build/uzonmail-desktop-win-x64-*.zip
        retention-days: 30

  build-windows-server:
    runs-on: windows-latest
    name: Build Windows Server
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'yarn'
        cache-dependency-path: 'ui-src/yarn.lock'

    - name: Install 7-Zip
      run: |
        choco install 7zip -y

    - name: Install Yarn
      run: |
        npm install -g yarn

    - name: Install frontend dependencies
      working-directory: ./ui-src
      run: |
        yarn install --frozen-lockfile

    - name: Build Windows Server
      working-directory: ./scripts
      shell: pwsh
      run: |
        ./build-win-server.ps1

    - name: Upload Windows Server Artifact
      uses: actions/upload-artifact@v4
      with:
        name: uzonmail-server-windows
        path: build/uzonmail-service-win-x64-*.zip
        retention-days: 30

  build-linux-server:
    runs-on: ubuntu-latest
    name: Build Linux Server
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'yarn'
        cache-dependency-path: 'ui-src/yarn.lock'

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y p7zip-full p7zip-rar

    - name: Install Yarn
      run: |
        npm install -g yarn

    - name: Install frontend dependencies
      working-directory: ./ui-src
      run: |
        yarn install --frozen-lockfile

    - name: Build frontend
      working-directory: ./ui-src
      run: |
        yarn build

    - name: Build main service without plugins
      run: |
        echo "=== 构建主服务（跳过插件）==="
        
        # 只构建 UZonMailService 主项目
        cd backend-src/UZonMailService
        
        # 发布主服务
        dotnet publish -c Release -o ../../build/service-linux-x64 -r linux-x64 --self-contained false
        
        # 创建必要的目录
        mkdir -p ../../build/service-linux-x64/wwwroot
        mkdir -p ../../build/service-linux-x64/Plugins
        mkdir -p ../../build/service-linux-x64/Assembly
        mkdir -p ../../build/service-linux-x64/data/db
        
        # 复制 Quartz 数据库文件
        cp Quartz/quartz-sqlite.sqlite3 ../../build/service-linux-x64/data/db/quartz-sqlite.sqlite3
        
        # 删除开发配置文件
        rm ../../build/service-linux-x64/appsettings.Development.json 2>/dev/null || true
        
        cd ../..

    - name: Copy frontend to service
      run: |
        echo "=== 复制前端文件到服务端 ==="
        cp -r ui-src/dist/spa/* build/service-linux-x64/wwwroot/

    - name: Copy necessary scripts
      run: |
        echo "=== 复制必要的脚本文件 ==="
        cp scripts/docker-deploy.sh build/service-linux-x64/ 2>/dev/null || echo "docker-deploy.sh 不存在"
        cp scripts/docker-compose.yml build/service-linux-x64/ 2>/dev/null || echo "docker-compose.yml 不存在"
        cp scripts/Dockerfile build/service-linux-x64/ 2>/dev/null || echo "Dockerfile 不存在"

    - name: Create Linux service files
      run: |
        echo "=== 创建 Linux 服务文件 ==="
        
        # 创建安装脚本
        cat > build/service-linux-x64/install.sh << 'EOF'
#!/bin/bash
echo "UZonMail Linux 安装脚本"
echo "这是一个基础版本，不包含插件功能"
echo "请确保已安装 .NET 9.0 运行时"
echo "安装完成"
EOF
        
        # 创建 systemd 服务文件
        cat > build/service-linux-x64/uzon-mail.service << 'EOF'
[Unit]
Description=UZonMail Service
After=network.target

[Service]
Type=notify
WorkingDirectory=/opt/uzonmail
ExecStart=/usr/bin/dotnet /opt/uzonmail/UZonMailService.dll
Restart=always
RestartSec=10

[Install]
WantedBy=multi-user.target
EOF
        
        chmod +x build/service-linux-x64/install.sh

    - name: Create package
      run: |
        echo "=== 创建打包文件 ==="
        cd build/service-linux-x64
        7z a -tzip ../uzonmail-service-linux-x64-basic.zip *
        cd ../..
        
        # 创建带版本号的包
        VERSION=$(date +%Y%m%d.%H%M)
        cp build/uzonmail-service-linux-x64-basic.zip build/uzonmail-service-linux-x64-$VERSION.zip

    - name: Check build results
      run: |
        echo "=== 检查构建结果 ==="
        if [ -d "build" ]; then
          echo "Build directory exists"
          ls -la build/
          echo "=== 所有构建文件 ==="
          find build/ -name "*.zip" -type f 2>/dev/null | while read file; do
            echo "Found: $file"
            ls -la "$file"
          done
        else
          echo "Build directory not found"
        fi

    - name: Upload Linux Server Artifact
      uses: actions/upload-artifact@v4
      with:
        name: uzonmail-server-linux
        path: |
          build/uzonmail-service-linux-x64-*.zip
          build/uzonmail-linux-x64-*.zip
        retention-days: 30
        if-no-files-found: warn

  create-release:
    runs-on: ubuntu-latest
    name: Create Release
    if: github.event_name == 'release' && github.event.action == 'published'
    needs: [build-windows-desktop, build-windows-server, build-linux-server]
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts

    - name: List downloaded files
      run: |
        echo "=== All downloaded artifacts ==="
        find ./artifacts -type f -name "*.zip" | while read file; do
          echo "Found: $file"
          ls -la "$file"
        done

    - name: Upload to Release
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: ./artifacts/**/*.zip
        tag: ${{ github.ref }}
        overwrite: true
        file_glob: true
