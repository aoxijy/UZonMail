name: Build UZonMail

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  release:
    types: [ published ]

env:
  DOTNET_VERSION: '9.0.x'
  NODE_VERSION: '18.x'

jobs:
  build-windows-desktop:
    runs-on: windows-latest
    name: Build Windows Desktop
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'yarn'
        cache-dependency-path: 'ui-src/yarn.lock'

    - name: Install 7-Zip
      run: |
        choco install 7zip -y

    - name: Install Yarn
      run: |
        npm install -g yarn

    - name: Install frontend dependencies
      working-directory: ./ui-src
      run: |
        yarn install --frozen-lockfile

    - name: Build Windows Desktop
      working-directory: ./scripts
      shell: pwsh
      run: |
        ./build-desktop.ps1

    - name: Upload Windows Desktop Artifact
      uses: actions/upload-artifact@v4
      with:
        name: uzonmail-desktop-windows
        path: build/uzonmail-desktop-win-x64-*.zip
        retention-days: 30

  build-windows-server:
    runs-on: windows-latest
    name: Build Windows Server
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'yarn'
        cache-dependency-path: 'ui-src/yarn.lock'

    - name: Install 7-Zip
      run: |
        choco install 7zip -y

    - name: Install Yarn
      run: |
        npm install -g yarn

    - name: Install frontend dependencies
      working-directory: ./ui-src
      run: |
        yarn install --frozen-lockfile

    - name: Build Windows Server
      working-directory: ./scripts
      shell: pwsh
      run: |
        ./build-win-server.ps1

    - name: Upload Windows Server Artifact
      uses: actions/upload-artifact@v4
      with:
        name: uzonmail-server-windows
        path: build/uzonmail-service-win-x64-*.zip
        retention-days: 30

  build-linux-server:
    runs-on: ubuntu-latest
    name: Build Linux Server
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'yarn'
        cache-dependency-path: 'ui-src/yarn.lock'

    - name: Install 7zip and PowerShell
      run: |
        sudo apt-get update
        # 安装7zip
        sudo apt-get install -y p7zip-full p7zip-rar
        # 安装PowerShell
        sudo apt-get install -y wget
        wget -q https://packages.microsoft.com/config/ubuntu/20.04/packages-microsoft-prod.deb
        sudo dpkg -i packages-microsoft-prod.deb
        sudo apt-get update
        sudo apt-get install -y powershell
        rm packages-microsoft-prod.deb

    - name: Install Yarn
      run: |
        npm install -g yarn

    - name: Install frontend dependencies
      working-directory: ./ui-src
      run: |
        yarn install --frozen-lockfile

    - name: Create 7z.exe wrapper for Linux
      run: |
        # 创建一个7z.exe的包装器，让PowerShell可以找到7z
        echo '#!/bin/bash' | sudo tee /usr/local/bin/7z.exe
        echo '/usr/bin/7z "$@"' | sudo tee -a /usr/local/bin/7z.exe
        sudo chmod +x /usr/local/bin/7z.exe
        echo "7z.exe wrapper created at /usr/local/bin/7z.exe"

    - name: Debug - Check environment
      run: |
        echo "=== Environment Check ==="
        echo "7z path: $(which 7z)"
        7z --version || echo "7z not found"
        echo "7z.exe wrapper: $(which 7z.exe || echo 'not found')"
        echo "PowerShell: $(which pwsh || echo 'not found')"

    - name: Build Linux Server
      working-directory: ./scripts
      shell: pwsh
      run: |
        Write-Host "=== Starting Linux build in PowerShell ==="
        Write-Host "PowerShell version: $($PSVersionTable.PSVersion)"
        Write-Host "Current directory: $(Get-Location)"
        
        Write-Host "=== Testing 7z access ==="
        # 测试7z.exe包装器
        $7zResult = Get-Command "7z.exe" -ErrorAction SilentlyContinue
        if ($7zResult) {
            Write-Host "✓ 7z.exe found at: $($7zResult.Source)"
            & 7z.exe --version
            if ($LASTEXITCODE -eq 0) {
                Write-Host "✓ 7z.exe is working"
            } else {
                Write-Host "✗ 7z.exe test failed"
            }
        } else {
            Write-Host "✗ 7z.exe not found"
        }
        
        Write-Host "=== Running build script ==="
        try {
            ./build-linux.ps1
            Write-Host "✓ Build completed successfully"
        } catch {
            Write-Host "✗ Build failed: $($_.Exception.Message)"
            Write-Host "Error details: $($_.Exception.StackTrace)"
            exit 1
        }

    - name: Check build results
      run: |
        echo "=== Build directory contents ==="
        if [ -d "build" ]; then
          echo "Build directory exists"
          ls -la build/
          echo "=== All files in build directory ==="
          find build/ -type f 2>/dev/null | while read file; do
            echo "Found: $file"
            ls -la "$file"
          done
        else
          echo "ERROR: Build directory not found!"
          echo "=== Current directory structure ==="
          ls -la
          echo "=== Searching for any build artifacts ==="
          find . -name "*.zip" -type f 2>/dev/null | head -20 || echo "No zip files found"
        fi

    - name: Upload Linux Server Artifact
      uses: actions/upload-artifact@v4
      with:
        name: uzonmail-server-linux
        path: |
          build/uzonmail-linux-x64-*.zip
          build/uzonmail-service-linux-x64-*.zip
          build/*linux*.zip
          build/*.zip
        retention-days: 30
        if-no-files-found: warn

  create-release:
    runs-on: ubuntu-latest
    name: Create Release
    if: github.event_name == 'release' && github.event.action == 'published'
    needs: [build-windows-desktop, build-windows-server, build-linux-server]
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts

    - name: List downloaded files
      run: |
        echo "=== All downloaded artifacts ==="
        find ./artifacts -type f -name "*.zip" | while read file; do
          echo "Found: $file"
          ls -la "$file"
        done

    - name: Upload to Release
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: ./artifacts/**/*.zip
        tag: ${{ github.ref }}
        overwrite: true
        file_glob: true
