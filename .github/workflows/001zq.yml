name: Build UZonMail

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  release:
    types: [ published ]

env:
  DOTNET_VERSION: '9.0.x'
  NODE_VERSION: '18.x'

jobs:
  build-windows-desktop:
    runs-on: windows-latest
    name: Build Windows Desktop
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'yarn'
        cache-dependency-path: 'ui-src/yarn.lock'

    - name: Install 7-Zip
      run: |
        choco install 7zip -y

    - name: Install Yarn
      run: |
        npm install -g yarn

    - name: Install frontend dependencies
      working-directory: ./ui-src
      run: |
        yarn install --frozen-lockfile

    - name: Build Windows Desktop
      working-directory: ./scripts
      shell: pwsh
      run: |
        ./build-desktop.ps1

    - name: Upload Windows Desktop Artifact
      uses: actions/upload-artifact@v4
      with:
        name: uzonmail-desktop-windows
        path: build/uzonmail-desktop-win-x64-*.zip
        retention-days: 30

  build-windows-server:
    runs-on: windows-latest
    name: Build Windows Server
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'yarn'
        cache-dependency-path: 'ui-src/yarn.lock'

    - name: Install 7-Zip
      run: |
        choco install 7zip -y

    - name: Install Yarn
      run: |
        npm install -g yarn

    - name: Install frontend dependencies
      working-directory: ./ui-src
      run: |
        yarn install --frozen-lockfile

    - name: Build Windows Server
      working-directory: ./scripts
      shell: pwsh
      run: |
        ./build-win-server.ps1

    - name: Upload Windows Server Artifact
      uses: actions/upload-artifact@v4
      with:
        name: uzonmail-server-windows
        path: build/uzonmail-service-win-x64-*.zip
        retention-days: 30

  build-linux-server:
    runs-on: ubuntu-latest
    name: Build Linux Server
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'yarn'
        cache-dependency-path: 'ui-src/yarn.lock'

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y p7zip-full p7zip-rar wget

    - name: Install PowerShell
      run: |
        wget -q https://packages.microsoft.com/config/ubuntu/20.04/packages-microsoft-prod.deb
        sudo dpkg -i packages-microsoft-prod.deb
        sudo apt-get update
        sudo apt-get install -y powershell
        rm packages-microsoft-prod.deb

    - name: Install Yarn
      run: |
        npm install -g yarn

    - name: Install frontend dependencies
      working-directory: ./ui-src
      run: |
        yarn install --frozen-lockfile

    - name: Create 7z.exe wrapper for Linux
      run: |
        echo '#!/bin/bash' | sudo tee /usr/local/bin/7z.exe
        echo '/usr/bin/7z "$@"' | sudo tee -a /usr/local/bin/7z.exe
        sudo chmod +x /usr/local/bin/7z.exe

    - name: Fix project references
      run: |
        echo "=== 修复项目引用 ==="
        echo "检查项目结构..."
        find . -name "*.csproj" -type f | head -10
        
        # 检查 UZonMailDB 项目是否存在
        if [ -f "backend-src/UZonMailDB/UZonMailDB.csproj" ]; then
          echo "✓ UZonMailDB 项目存在"
          # 创建符号链接到根目录，以便项目引用能找到它
          ln -sf backend-src/UZonMailDB UZonMailDB || echo "符号链接创建失败，继续构建"
        else
          echo "✗ UZonMailDB 项目不存在"
        fi

    - name: Restore all projects
      run: |
        echo "=== 恢复所有项目 ==="
        # 恢复所有项目
        find . -name "*.csproj" -type f | while read proj; do
          echo "恢复项目: $proj"
          dotnet restore "$proj" --verbosity quiet || echo "恢复 $proj 失败"
        done

    - name: Build solution
      run: |
        echo "=== 构建解决方案 ==="
        # 查找解决方案文件
        SOLUTIONS=$(find . -name "*.sln" -type f | head -5)
        if [ -n "$SOLUTIONS" ]; then
          echo "找到解决方案文件:"
          echo "$SOLUTIONS"
          # 使用第一个找到的解决方案
          FIRST_SOLUTION=$(echo "$SOLUTIONS" | head -1)
          echo "使用解决方案: $FIRST_SOLUTION"
          # 构建解决方案
          dotnet build "$FIRST_SOLUTION" --configuration Release --verbosity normal || echo "解决方案构建失败"
        else
          echo "未找到解决方案文件，尝试构建所有项目"
          # 构建所有项目
          find . -name "*.csproj" -type f | while read proj; do
            echo "构建项目: $proj"
            dotnet build "$proj" --configuration Release --verbosity minimal || echo "构建 $proj 失败"
          done
        fi

    - name: Build Linux Server using original script
      working-directory: ./scripts
      shell: pwsh
      run: |
        Write-Host "=== 使用原始构建脚本构建 Linux 版本 ==="
        Write-Host "PowerShell version: $($PSVersionTable.PSVersion)"
        
        Write-Host "=== Testing 7z access ==="
        $7zResult = Get-Command "7z.exe" -ErrorAction SilentlyContinue
        if ($7zResult) {
            Write-Host "✓ 7z.exe found at: $($7zResult.Source)"
            & 7z.exe --version
        } else {
            Write-Host "✗ 7z.exe not found"
        }
        
        Write-Host "=== Running original build script ==="
        try {
            ./build-linux.ps1
            Write-Host "✓ 原始构建脚本成功完成"
        } catch {
            Write-Host "✗ 原始构建脚本失败: $($_.Exception.Message)"
            Write-Host "Error details: $($_.Exception.StackTrace)"
            exit 1
        }

    - name: Check build results
      run: |
        echo "=== 检查构建结果 ==="
        if [ -d "build" ]; then
          echo "Build directory exists"
          ls -la build/
          echo "=== 所有构建文件 ==="
          find build/ -type f 2>/dev/null | while read file; do
            echo "Found: $file"
            ls -la "$file"
          done
        else
          echo "Build directory not found"
          echo "=== 当前目录结构 ==="
          ls -la
        fi

    - name: Upload Linux Server Artifact
      uses: actions/upload-artifact@v4
      with:
        name: uzonmail-server-linux
        path: |
          build/uzonmail-linux-x64-*.zip
          build/uzonmail-service-linux-x64-*.zip
          build/*.zip
        retention-days: 30
        if-no-files-found: warn

  create-release:
    runs-on: ubuntu-latest
    name: Create Release
    if: github.event_name == 'release' && github.event.action == 'published'
    needs: [build-windows-desktop, build-windows-server, build-linux-server]
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts

    - name: List downloaded files
      run: |
        echo "=== All downloaded artifacts ==="
        find ./artifacts -type f -name "*.zip" | while read file; do
          echo "Found: $file"
          ls -la "$file"
        done

    - name: Upload to Release
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: ./artifacts/**/*.zip
        tag: ${{ github.ref }}
        overwrite: true
        file_glob: true
