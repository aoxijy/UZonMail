name: Build UZonMail

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  release:
    types: [ published ]

env:
  DOTNET_VERSION: '9.0.x'
  NODE_VERSION: '18.x'

jobs:
  build-windows-desktop:
    runs-on: windows-latest
    name: Build Windows Desktop
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'yarn'
        cache-dependency-path: 'ui-src/yarn.lock'

    - name: Install 7-Zip
      run: |
        choco install 7zip -y

    - name: Install Yarn
      run: |
        npm install -g yarn

    - name: Install frontend dependencies
      working-directory: ./ui-src
      run: |
        yarn install --frozen-lockfile

    - name: Build Windows Desktop
      working-directory: ./scripts
      shell: pwsh
      run: |
        ./build-desktop.ps1

    - name: Upload Windows Desktop Artifact
      uses: actions/upload-artifact@v4
      with:
        name: uzonmail-desktop-windows
        path: build/uzonmail-desktop-win-x64-*.zip
        retention-days: 30

  build-windows-server:
    runs-on: windows-latest
    name: Build Windows Server
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'yarn'
        cache-dependency-path: 'ui-src/yarn.lock'

    - name: Install 7-Zip
      run: |
        choco install 7zip -y

    - name: Install Yarn
      run: |
        npm install -g yarn

    - name: Install frontend dependencies
      working-directory: ./ui-src
      run: |
        yarn install --frozen-lockfile

    - name: Build Windows Server
      working-directory: ./scripts
      shell: pwsh
      run: |
        ./build-win-server.ps1

    - name: Upload Windows Server Artifact
      uses: actions/upload-artifact@v4
      with:
        name: uzonmail-server-windows
        path: build/uzonmail-service-win-x64-*.zip
        retention-days: 30

  build-linux-server:
    runs-on: ubuntu-latest
    name: Build Linux Server
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'yarn'
        cache-dependency-path: 'ui-src/yarn.lock'

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y p7zip-full p7zip-rar wget

    - name: Install PowerShell
      run: |
        wget -q https://packages.microsoft.com/config/ubuntu/20.04/packages-microsoft-prod.deb
        sudo dpkg -i packages-microsoft-prod.deb
        sudo apt-get update
        sudo apt-get install -y powershell
        rm packages-microsoft-prod.deb

    - name: Install Yarn
      run: |
        npm install -g yarn

    - name: Install frontend dependencies
      working-directory: ./ui-src
      run: |
        yarn install --frozen-lockfile

    - name: Create 7z.exe wrapper for Linux
      run: |
        echo '#!/bin/bash' | sudo tee /usr/local/bin/7z.exe
        echo '/usr/bin/7z "$@"' | sudo tee -a /usr/local/bin/7z.exe
        sudo chmod +x /usr/local/bin/7z.exe

    - name: Build main service only
      working-directory: ./backend-src
      run: |
        echo "=== 构建主服务 ==="
        # 只构建主要的 UZonMailService
        if [ -f "UZonMailService/UZonMailService.csproj" ]; then
          dotnet publish "UZonMailService/UZonMailService.csproj" -c Release -o "../build/service-linux-x64" -r linux-x64 --self-contained false
          echo "主服务构建完成"
        else
          echo "未找到 UZonMailService 项目"
        fi

    - name: Build frontend
      working-directory: ./ui-src
      run: |
        echo "=== 构建前端 ==="
        yarn build
        echo "前端构建完成"

    - name: Create package structure
      run: |
        echo "=== 创建打包结构 ==="
        mkdir -p build/uzonmail-package
        
        # 复制服务端文件
        if [ -d "build/service-linux-x64" ]; then
          cp -r build/service-linux-x64/* build/uzonmail-package/
        fi
        
        # 复制前端文件
        if [ -d "ui-src/dist/spa" ]; then
          mkdir -p build/uzonmail-package/wwwroot
          cp -r ui-src/dist/spa/* build/uzonmail-package/wwwroot/
        fi
        
        # 复制必要的脚本文件
        if [ -f "scripts/docker-deploy.sh" ]; then
          cp scripts/docker-deploy.sh build/uzonmail-package/
        fi
        if [ -f "scripts/docker-compose.yml" ]; then
          cp scripts/docker-compose.yml build/uzonmail-package/
        fi
        
        echo "打包结构创建完成"

    - name: Create zip package
      run: |
        echo "=== 创建 ZIP 包 ==="
        cd build/uzonmail-package
        7z a -tzip ../uzonmail-linux-x64-simple.zip *
        cd ../..
        echo "ZIP 包创建完成"

    - name: Check build results
      run: |
        echo "=== 检查构建结果 ==="
        if [ -d "build" ]; then
          echo "Build directory exists"
          ls -la build/
          echo "=== 所有构建文件 ==="
          find build/ -type f 2>/dev/null | while read file; do
            echo "Found: $file"
            ls -la "$file"
          done
        else
          echo "Build directory not found"
        fi

    - name: Upload Linux Server Artifact
      uses: actions/upload-artifact@v4
      with:
        name: uzonmail-server-linux
        path: |
          build/uzonmail-linux-x64-*.zip
          build/*.zip
        retention-days: 30
        if-no-files-found: warn

  create-release:
    runs-on: ubuntu-latest
    name: Create Release
    if: github.event_name == 'release' && github.event.action == 'published'
    needs: [build-windows-desktop, build-windows-server, build-linux-server]
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts

    - name: List downloaded files
      run: |
        echo "=== All downloaded artifacts ==="
        find ./artifacts -type f -name "*.zip" | while read file; do
          echo "Found: $file"
          ls -la "$file"
        done

    - name: Upload to Release
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: ./artifacts/**/*.zip
        tag: ${{ github.ref }}
        overwrite: true
        file_glob: true
