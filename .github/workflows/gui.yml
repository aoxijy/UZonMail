name: Build Desktop GUI and Service

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch: # 允许手动触发

env:
  NODE_VERSION: '18'
  DOTNET_VERSION: '8.x'

jobs:
  build-service-linux:
    name: Build Service for Linux
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Build backend
      run: |
        cd backend-src/UZonMailService
        dotnet publish -c Release -o ../../build/service-linux-x64 -r linux-x64 --self-contained false /nowarn:CS8600,CS8601,CS8602,CS8603,CS8604,CS8618,CS8625
        
    - name: Prepare service directories
      run: |
        mkdir -p build/service-linux-x64/public
        mkdir -p build/service-linux-x64/wwwroot
        mkdir -p build/service-linux-x64/Quartz
        cp backend-src/UZonMailService/Quartz/quartz-sqlite.sqlite3 build/service-linux-x64/Quartz/
        
    - name: Copy frontend to service
      run: |
        cp -r ui-src/dist/spa/* build/service-linux-x64/wwwroot/

  build-windows-gui:
    name: Build Windows Desktop GUI
    runs-on: windows-latest
    needs: build-service-linux # 确保先构建服务端（如果需要）
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'yarn'
        cache-dependency-path: ui-src/yarn.lock
        
    - name: Install frontend dependencies
      run: |
        cd ui-src
        yarn install
        
    - name: Build frontend
      run: |
        cd ui-src
        yarn build
        
    - name: Build Windows Desktop GUI
      run: |
        # 假设你的项目根目录有 build-desktop.ps1 脚本
        .\build-desktop.ps1
      shell: pwsh
      
    - name: Upload Windows GUI Artifact
      uses: actions/upload-artifact@v4
      with:
        name: windows-desktop-gui
        path: |
          build/desktop/*.exe
          build/desktop/*.msi
        if-no-files-found: error

  package-and-release:
    name: Package and Release
    runs-on: ubuntu-latest
    needs: [build-service-linux, build-windows-gui]
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
        
    - name: Display artifact structure
      run: ls -R artifacts
      
    - name: Install 7zip
      run: sudo apt-get update && sudo apt-get install -y p7zip-full
      
    - name: Create Linux service package
      run: |
        cd artifacts/service-linux-x64
        SERVICE_VERSION=$(find . -name "UZonMailService.dll" -exec grep -a "FileVersion" {} \; | head -1 | sed 's/.*FileVersion.*"\([^"]*\)".*/\1/' || echo "unknown")
        7z a -tzip ../../uzonmail-service-linux-x64-$SERVICE_VERSION.zip ./*
        mv ../../uzonmail-service-linux-x64-*.zip ../
        
    - name: Create release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: |
          uzonmail-service-linux-x64-*.zip
          artifacts/windows-desktop-gui/*.exe
          artifacts/windows-desktop-gui/*.msi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
